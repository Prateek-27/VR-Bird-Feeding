//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""bb286b71-8509-4c36-a94e-877f0b38c798"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""20433f61-0eb9-4589-9f66-ba741476dcca"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveNew"",
                    ""type"": ""Value"",
                    ""id"": ""df6013f4-3324-4553-8d80-8e66faa3eeb8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""test"",
                    ""type"": ""Value"",
                    ""id"": ""09df762c-751f-4ed4-8b78-7041a040036f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""x"",
                    ""type"": ""Button"",
                    ""id"": ""49e223a1-a4c9-46cb-9044-28d5443e9cf3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""y"",
                    ""type"": ""Button"",
                    ""id"": ""920f1c52-1ddf-42bd-96e2-3b742ebb9f04"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""a"",
                    ""type"": ""Button"",
                    ""id"": ""f520737a-db05-4e0b-88c4-73d8b1b25b7d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""b"",
                    ""type"": ""Button"",
                    ""id"": ""94865323-d60e-42d7-934c-3b8d42e2404d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""power"",
                    ""type"": ""Button"",
                    ""id"": ""31401f37-e91e-48f1-9d69-a9fdbab0aee5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""menu"",
                    ""type"": ""Button"",
                    ""id"": ""aa6c7fd1-5e6e-4163-ba1f-5a534cc1b209"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""trigger (OK)"",
                    ""type"": ""Button"",
                    ""id"": ""f0a49844-f83b-41dd-999b-91db9bf4a8b1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""abebe88c-fc64-47b1-ae03-29deafb8dfe3"",
                    ""path"": ""<Joystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Movements"",
                    ""id"": ""01111427-0083-4656-b93b-2cb8441d2e29"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveNew"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ed0bb30f-7054-48a8-8f52-0d8eb3455e49"",
                    ""path"": ""<HID::MOCUTE  Gamepad >/stick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveNew"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""62fa3f72-3953-4e1c-843f-fb04f7550d4b"",
                    ""path"": ""<Joystick>/stick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveNew"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""86ada457-f9af-4079-b2c7-be8048d3ca9c"",
                    ""path"": ""<Joystick>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveNew"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""aaac5b4c-03c5-4029-a674-795a5f314617"",
                    ""path"": ""<Joystick>/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveNew"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f6337a5b-5de1-4d71-9550-a478478ee5e0"",
                    ""path"": ""<HID::MOCUTE  Gamepad >/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""test"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60821496-228d-43ce-8252-a296e790b523"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""test"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""35f6f17e-3ee0-459d-89ac-f64c17a8ce56"",
                    ""path"": ""<XInputController>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""test"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""318a448f-6932-407e-ad7f-62ebc0b64abd"",
                    ""path"": ""<XInputController>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""x"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""41e4b095-3966-4f27-ac17-9f01a194f9fc"",
                    ""path"": ""<XInputController>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""y"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b1251e0-3183-46af-8486-477a0c84a382"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""a"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fe342242-fc66-443e-9df0-970c7ecd5316"",
                    ""path"": ""<XInputController>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""b"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9f02d0fe-9053-4d87-ad78-d91ea3a4ac9a"",
                    ""path"": ""<HID::MOCUTE  Gamepad >/button2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""power"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e01acbd2-d2ee-4b6e-b105-b9c92f1b8eba"",
                    ""path"": ""<HID::MOCUTE  Gamepad >/button11"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6dd802ef-8706-477c-a078-9a26600f635e"",
                    ""path"": ""<HID::MOCUTE  Gamepad >/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""trigger (OK)"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Move = m_Gameplay.FindAction("Move", throwIfNotFound: true);
        m_Gameplay_MoveNew = m_Gameplay.FindAction("MoveNew", throwIfNotFound: true);
        m_Gameplay_test = m_Gameplay.FindAction("test", throwIfNotFound: true);
        m_Gameplay_x = m_Gameplay.FindAction("x", throwIfNotFound: true);
        m_Gameplay_y = m_Gameplay.FindAction("y", throwIfNotFound: true);
        m_Gameplay_a = m_Gameplay.FindAction("a", throwIfNotFound: true);
        m_Gameplay_b = m_Gameplay.FindAction("b", throwIfNotFound: true);
        m_Gameplay_power = m_Gameplay.FindAction("power", throwIfNotFound: true);
        m_Gameplay_menu = m_Gameplay.FindAction("menu", throwIfNotFound: true);
        m_Gameplay_triggerOK = m_Gameplay.FindAction("trigger (OK)", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private IGameplayActions m_GameplayActionsCallbackInterface;
    private readonly InputAction m_Gameplay_Move;
    private readonly InputAction m_Gameplay_MoveNew;
    private readonly InputAction m_Gameplay_test;
    private readonly InputAction m_Gameplay_x;
    private readonly InputAction m_Gameplay_y;
    private readonly InputAction m_Gameplay_a;
    private readonly InputAction m_Gameplay_b;
    private readonly InputAction m_Gameplay_power;
    private readonly InputAction m_Gameplay_menu;
    private readonly InputAction m_Gameplay_triggerOK;
    public struct GameplayActions
    {
        private @PlayerControls m_Wrapper;
        public GameplayActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Gameplay_Move;
        public InputAction @MoveNew => m_Wrapper.m_Gameplay_MoveNew;
        public InputAction @test => m_Wrapper.m_Gameplay_test;
        public InputAction @x => m_Wrapper.m_Gameplay_x;
        public InputAction @y => m_Wrapper.m_Gameplay_y;
        public InputAction @a => m_Wrapper.m_Gameplay_a;
        public InputAction @b => m_Wrapper.m_Gameplay_b;
        public InputAction @power => m_Wrapper.m_Gameplay_power;
        public InputAction @menu => m_Wrapper.m_Gameplay_menu;
        public InputAction @triggerOK => m_Wrapper.m_Gameplay_triggerOK;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void SetCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove;
                @MoveNew.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMoveNew;
                @MoveNew.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMoveNew;
                @MoveNew.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMoveNew;
                @test.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnTest;
                @test.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnTest;
                @test.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnTest;
                @x.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnX;
                @x.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnX;
                @x.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnX;
                @y.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnY;
                @y.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnY;
                @y.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnY;
                @a.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnA;
                @a.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnA;
                @a.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnA;
                @b.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnB;
                @b.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnB;
                @b.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnB;
                @power.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPower;
                @power.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPower;
                @power.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPower;
                @menu.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMenu;
                @menu.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMenu;
                @menu.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMenu;
                @triggerOK.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnTriggerOK;
                @triggerOK.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnTriggerOK;
                @triggerOK.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnTriggerOK;
            }
            m_Wrapper.m_GameplayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @MoveNew.started += instance.OnMoveNew;
                @MoveNew.performed += instance.OnMoveNew;
                @MoveNew.canceled += instance.OnMoveNew;
                @test.started += instance.OnTest;
                @test.performed += instance.OnTest;
                @test.canceled += instance.OnTest;
                @x.started += instance.OnX;
                @x.performed += instance.OnX;
                @x.canceled += instance.OnX;
                @y.started += instance.OnY;
                @y.performed += instance.OnY;
                @y.canceled += instance.OnY;
                @a.started += instance.OnA;
                @a.performed += instance.OnA;
                @a.canceled += instance.OnA;
                @b.started += instance.OnB;
                @b.performed += instance.OnB;
                @b.canceled += instance.OnB;
                @power.started += instance.OnPower;
                @power.performed += instance.OnPower;
                @power.canceled += instance.OnPower;
                @menu.started += instance.OnMenu;
                @menu.performed += instance.OnMenu;
                @menu.canceled += instance.OnMenu;
                @triggerOK.started += instance.OnTriggerOK;
                @triggerOK.performed += instance.OnTriggerOK;
                @triggerOK.canceled += instance.OnTriggerOK;
            }
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnMoveNew(InputAction.CallbackContext context);
        void OnTest(InputAction.CallbackContext context);
        void OnX(InputAction.CallbackContext context);
        void OnY(InputAction.CallbackContext context);
        void OnA(InputAction.CallbackContext context);
        void OnB(InputAction.CallbackContext context);
        void OnPower(InputAction.CallbackContext context);
        void OnMenu(InputAction.CallbackContext context);
        void OnTriggerOK(InputAction.CallbackContext context);
    }
}
